
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "utilityfog-fractal-tree"
version = "0.1.0"
description = "Advanced UtilityFog simulation system with comprehensive telemetry, visualization, and observability capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "UtilityFog Team", email = "team@utilityfog.dev"}
]
maintainers = [
    {name = "UtilityFog Team", email = "team@utilityfog.dev"}
]
keywords = [
    "simulation",
    "utilityfog",
    "telemetry",
    "visualization",
    "observability",
    "distributed-systems",
    "agent-based-modeling"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring"
]
requires-python = ">=3.9"
dependencies = [
    "plotly>=5.0.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "networkx>=2.6.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "pydantic>=1.8.0",
    "structlog>=21.0.0",
    "prometheus-client>=0.14.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0"
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
    "mkdocs-git-revision-date-localized-plugin>=1.1.0",
    "mkdocs-minify-plugin>=0.6.0",
    "mkdocs-redirects>=1.2.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",
    "coverage[toml]>=6.0.0"
]

[project.urls]
Homepage = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen"
Documentation = "https://goldislops.github.io/UtilityFog-Fractal-TreeOpen/"
Repository = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen.git"
Issues = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen/issues"
Changelog = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen/blob/main/CHANGELOG.md"

[project.scripts]
ufog-diagnose = "utilityfog_frontend.cli_viz.cli:main"
ufog-telemetry = "UtilityFog_Agent_Package.agent.telemetry:cli_main"
ufog-viz = "utilityfog_frontend.cli_viz.visualization:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["UtilityFog_Agent_Package*", "utilityfog_frontend*", "agent*", "config*", "policy*"]
exclude = ["tests*", "test_*", "demo_*", "*_test*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.toml", "*.cfg", "*.ini"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=UtilityFog_Agent_Package",
    "--cov=utilityfog_frontend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks"
]

[tool.coverage.run]
source = ["UtilityFog_Agent_Package", "utilityfog_frontend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/*_test.py",
    "*/demo_*",
    "*/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Code formatting and linting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
