[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "utilityfog-policy-check"
version = "0.1.0"
description = "Policy Check CLI tool for UtilityFog Fractal Tree"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "UtilityFog Team"}
]
keywords = ["policy", "cli", "opa", "security"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click>=8.0.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
policy-check = "tools.policy-check.check_policy:main"

[project.urls]
Homepage = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen"
Repository = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen"
Issues = "https://github.com/Goldislops/UtilityFog-Fractal-TreeOpen/issues"

[tool.setuptools.packages.find]
include = ["tools*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["tools"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
