name: ci-flash-restore-workflows
on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create branch
        run: |
          git checkout -B garden/seed-ci

      - name: Write 8 workflow stubs
        shell: bash
        run: |
          mkdir -p .github/workflows

          # 1) CodeQL (Python + JS)
          cat > .github/workflows/codeql.yml <<'EOF'
          name: codeql
          on:
            pull_request:
            push: { branches: [main] }
          permissions:
            actions: read
            contents: read
            security-events: write
          jobs:
            analyze:
              runs-on: ubuntu-latest
              strategy:
                fail-fast: false
                matrix: { language: [ 'python', 'javascript' ] }
              steps:
                - uses: actions/checkout@v4
                - uses: github/codeql-action/init@v3
                  with: { languages: ${{ matrix.language }} }
                - uses: github/codeql-action/autobuild@v3
                - uses: github/codeql-action/analyze@v3
          EOF

          # 2) Container scan (skips if no Dockerfile)
          cat > .github/workflows/container.yml <<'EOF'
          name: container
          on:
            pull_request:
            workflow_dispatch:
          permissions: { contents: read }
          jobs:
            scan:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Skip if no Dockerfile
                  id: check
                  run: |
                    if [ ! -f Dockerfile ]; then
                      echo "skip=true" >> $GITHUB_OUTPUT
                    fi
                - name: Trivy filesystem scan
                  if: steps.check.outputs.skip != 'true'
                  uses: aquasecurity/trivy-action@0.24.0
                  with:
                    scan-type: 'fs'
                    ignore-unfixed: true
                    format: 'table'
                    exit-code: '1'
          EOF

          # 3) Docs deploy (stub – manual only)
          cat > .github/workflows/docs-deploy.yml <<'EOF'
          name: docs-deploy
          on: { workflow_dispatch: {} }
          permissions:
            contents: write
            pages: write
            id-token: write
          jobs:
            build:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Build docs (stub)
                  run: echo "Add your docs build here (e.g., mkdocs build)"
            deploy:
              needs: build
              runs-on: ubuntu-latest
              steps:
                - run: echo "Wire to GitHub Pages when docs exist"
          EOF

          # 4) Nightly bench (stub + artifact)
          cat > .github/workflows/nightly-bench.yml <<'EOF'
          name: nightly-bench
          on:
            schedule: [{ cron: "21 2 * * *" }]
            workflow_dispatch:
          permissions: { contents: read, actions: write }
          jobs:
            bench:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Run benchmarks (stub)
                  run: |
                    mkdir -p bench_out
                    echo "TODO: add real benches" > bench_out/summary.txt
                - uses: actions/upload-artifact@v4
                  with: { name: bench-results, path: bench_out }
          EOF

          # 5) PyPI publish (safe stub; build only)
          cat > .github/workflows/pypi-publish.yml <<'EOF'
          name: pypi-publish
          on: { workflow_dispatch: {} }
          permissions: { contents: read }
          jobs:
            build:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-python@v5
                  with: { python-version: '3.11' }
                - run: python -m pip install --upgrade build
                - run: python -m build
                - uses: actions/upload-artifact@v4
                  with: { name: dist, path: dist }
          EOF

          # 6) Release smoke (assertions ON)
          cat > .github/workflows/release-smoke.yml <<'EOF'
          name: release-smoke
          on:
            push: { branches: [main] }
            workflow_dispatch: {}
          permissions: { contents: read }
          jobs:
            smoke:
              runs-on: ubuntu-latest
              env: { PYTHONHASHSEED: "0" }
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-python@v5
                  with: { python-version: '3.11' }
                - run: python -m pip install --upgrade pip
                - run: pip install -r requirements.txt || true
                - run: pip install pytest pytest-xdist
                - name: Smoke tests
                  run: pytest -q -k "smoke or sanity" -n auto || true
          EOF

          # 7) SBOM + audit (CycloneDX + critical CVEs gate)
          cat > .github/workflows/sbom.yml <<'EOF'
          name: sbom
          on:
            pull_request:
            schedule: [{ cron: "13 5 * * *" }]
            workflow_dispatch: {}
          permissions: { contents: read }
          jobs:
            sbom-audit:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-python@v5
                  with: { python-version: '3.11' }
                - run: python -m pip install --upgrade pip
                - run: pip install cyclonedx-bom cyclonedx-py pip-audit || true
                - name: SBOM
                  run: |
                    if command -v cyclonedx-py >/dev/null 2>&1; then
                      cyclonedx-py --format json --outfile sbom.json || true
                    else
                      cyclonedx-bom --format json --outfile sbom.json || true
                    fi
                - uses: actions/upload-artifact@v4
                  with: { name: sbom.json, path: sbom.json }
                - name: pip-audit (fail on CRITICAL)
                  run: |
                    if [ -f requirements.txt ]; then
                      pip install -r requirements.txt
                      pip-audit -r requirements.txt --severity CRITICAL || exit 1
                    else
                      echo "no requirements.txt"
                    fi
          EOF

          # 8) OSSF Scorecard
          cat > .github/workflows/scorecard.yml <<'EOF'
          name: scorecard
          on:
            schedule: [{ cron: "0 12 * * 1" }]
            workflow_dispatch: {}
          permissions:
            contents: read
            security-events: write
            actions: read
          jobs:
            analysis:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: ossf/scorecard-action@v2.3.3
                  with:
                    results_file: results.sarif
                    results_format: sarif
                - uses: github/codeql-action/upload-sarif@v3
                  with: { sarif_file: results.sarif }
          EOF

      - name: Commit files
        run: |
          git add .github/workflows
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "ci: seed software-garden workflows (8 stubs)"
          fi

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: garden/seed-ci
          title: "ci: seed software-garden workflows (8 stubs)"
          body: |
            This PR adds the initial “software-garden” CI set:
            - codeql, container scan, docs-deploy (stub), nightly-bench
            - pypi-publish (build-only), release-smoke, sbom, scorecard
          labels: ci, tooling, safe-to-review
