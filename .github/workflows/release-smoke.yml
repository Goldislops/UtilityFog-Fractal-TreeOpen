
name: "Release Smoke Test"

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  smoke-test:
    name: Release Smoke Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build wheel and sdist
      run: |
        # Create minimal setup.py for building
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        setup(
            name="utilityfog-fractal-tree",
            version="0.1.0",
            packages=find_packages(),
            install_requires=[
                "plotly>=5.0.0",
                "pandas>=1.3.0",
                "numpy>=1.21.0",
                "networkx>=2.6.0",
            ],
            entry_points={
                'console_scripts': [
                    'ufog-diagnose=utilityfog_frontend.cli_viz.cli:main',
                ],
            },
            python_requires=">=3.9",
        )
        EOF
        
        python -m build

    - name: Install from wheel
      run: |
        pip install dist/*.whl

    - name: Run diagnostic command
      run: |
        # Create a simple diagnostic script since ufog-diagnose might not exist yet
        python -c "
        import json
        import sys
        import pkg_resources
        
        try:
            # Try to import main modules
            from utilityfog_frontend.cli_viz import cli
            from UtilityFog_Agent_Package.agent import observability
            
            diagnostic = {
                'status': 'success',
                'python_version': sys.version,
                'installed_packages': [str(d) for d in pkg_resources.working_set],
                'modules_imported': ['cli_viz', 'observability'],
                'timestamp': '$(date -Iseconds)'
            }
        except Exception as e:
            diagnostic = {
                'status': 'error',
                'error': str(e),
                'python_version': sys.version,
                'timestamp': '$(date -Iseconds)'
            }
        
        print(json.dumps(diagnostic, indent=2))
        " > smoke_test_results.json

    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      with:
        name: smoke-test-results-py${{ matrix.python-version }}
        path: smoke_test_results.json

    - name: Validate smoke test
      run: |
        if grep -q '"status": "success"' smoke_test_results.json; then
          echo "✅ Smoke test passed for Python ${{ matrix.python-version }}"
        else
          echo "❌ Smoke test failed for Python ${{ matrix.python-version }}"
          cat smoke_test_results.json
          exit 1
        fi
