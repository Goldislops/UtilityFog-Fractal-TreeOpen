/**
 * Token Transformation Configuration
 * 
 * This file defines how design tokens are transformed from Specify's format
 * into platform-specific formats (CSS, SCSS, JavaScript, etc.)
 */

module.exports = {
  // Global transformation settings
  global: {
    // Base font size for rem calculations
    baseFontSize: 16,
    
    // Decimal precision for numeric values
    precision: 3,
    
    // Whether to sort tokens alphabetically
    sortTokens: true,
    
    // Comment style for generated files
    commentStyle: {
      header: '/* Generated by Specify Design Tokens - Do not edit manually */',
      inline: '/* {comment} */',
      block: '/**\n * {comment}\n */'
    }
  },

  // Platform-specific transformations
  platforms: {
    css: {
      // CSS Custom Properties transformation
      transforms: [
        'name/cti/kebab',
        'size/px-to-rem',
        'color/hex-to-rgb',
        'content/icon'
      ],
      
      // CSS-specific formatting
      formatting: {
        prefix: ':root {\n',
        suffix: '\n}',
        separator: ';\n  ',
        commentStyle: '/* {comment} */'
      },
      
      // Token filters for CSS output
      filter: {
        attributes: {
          category: ['color', 'size', 'font']
        }
      }
    },

    scss: {
      // SCSS Variables transformation
      transforms: [
        'name/cti/kebab',
        'size/px-to-rem',
        'color/hex-to-rgb'
      ],
      
      // SCSS-specific formatting
      formatting: {
        prefix: '',
        suffix: ';',
        separator: ';\n',
        commentStyle: '// {comment}'
      },
      
      // SCSS variable prefix
      prefix: '$'
    },

    js: {
      // JavaScript/TypeScript transformation
      transforms: [
        'name/cti/camel',
        'size/px-to-rem',
        'color/hex-to-rgb'
      ],
      
      // JavaScript-specific formatting
      formatting: {
        prefix: 'export const tokens = {\n',
        suffix: '\n};\n\nexport default tokens;',
        separator: ',\n  ',
        commentStyle: '// {comment}'
      },
      
      // Type definitions
      generateTypes: true,
      typeDefinitionsPath: './tools/specify/output/tokens.d.ts'
    },

    json: {
      // JSON transformation (for documentation and tooling)
      transforms: [
        'name/cti/kebab',
        'size/px-to-rem'
      ],
      
      // JSON formatting
      formatting: {
        indent: 2,
        sortKeys: true
      }
    }
  },

  // Custom transformation functions
  transforms: {
    'size/px-to-rem': {
      type: 'value',
      matcher: (token) => {
        return token.attributes.category === 'size' && 
               typeof token.value === 'string' && 
               token.value.endsWith('px');
      },
      transformer: (token) => {
        const pxValue = parseFloat(token.value);
        const remValue = pxValue / 16; // Assuming 16px base font size
        return `${remValue}rem`;
      }
    },

    'color/hex-to-rgb': {
      type: 'value',
      matcher: (token) => {
        return token.attributes.category === 'color' && 
               typeof token.value === 'string' && 
               token.value.startsWith('#');
      },
      transformer: (token) => {
        // Convert hex to RGB for better CSS custom property support
        const hex = token.value.replace('#', '');
        const r = parseInt(hex.substr(0, 2), 16);
        const g = parseInt(hex.substr(2, 2), 16);
        const b = parseInt(hex.substr(4, 2), 16);
        return `${r}, ${g}, ${b}`;
      }
    },

    'name/cti/kebab': {
      type: 'name',
      transformer: (token) => {
        // Convert token path to kebab-case
        return token.path.join('-').toLowerCase().replace(/[^a-z0-9-]/g, '-');
      }
    },

    'name/cti/camel': {
      type: 'name',
      transformer: (token) => {
        // Convert token path to camelCase
        const kebab = token.path.join('-').toLowerCase();
        return kebab.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());
      }
    }
  },

  // Token categorization rules
  categories: {
    color: {
      matcher: (token) => token.type === 'color',
      transforms: ['color/hex-to-rgb', 'name/cti/kebab']
    },
    
    size: {
      matcher: (token) => token.type === 'dimension',
      transforms: ['size/px-to-rem', 'name/cti/kebab']
    },
    
    font: {
      matcher: (token) => token.type === 'typography',
      transforms: ['name/cti/kebab']
    },
    
    spacing: {
      matcher: (token) => token.attributes?.category === 'spacing',
      transforms: ['size/px-to-rem', 'name/cti/kebab']
    }
  },

  // Output file headers
  fileHeaders: {
    css: [
      '/**',
      ' * Design Tokens - CSS Custom Properties',
      ' * Generated from Specify Design System',
      ' * Do not edit this file directly',
      ' */',
      ''
    ],
    
    scss: [
      '//',
      '// Design Tokens - SCSS Variables',
      '// Generated from Specify Design System',
      '// Do not edit this file directly',
      '//',
      ''
    ],
    
    js: [
      '/**',
      ' * Design Tokens - JavaScript/TypeScript',
      ' * Generated from Specify Design System',
      ' * Do not edit this file directly',
      ' */',
      ''
    ]
  }
};
