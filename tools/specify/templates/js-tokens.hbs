/**
 * Design Tokens - JavaScript/TypeScript
 * Generated from Specify Design System
 * Do not edit this file directly
 */

export const tokens = {
{{#each tokens}}
  {{camelCase @key}}: '{{value}}', // {{type}}
{{/each}}
};

// Semantic token aliases for better readability
export const semantic = {
  // Policy-specific tokens
  policy: {
    allow: tokens.semanticPolicyAllow,
    deny: tokens.semanticPolicyDeny,
    warning: tokens.semanticPolicyWarning,
    info: tokens.semanticPolicyInfo,
  },
  
  // Test result tokens
  test: {
    pass: tokens.semanticTestPass,
    fail: tokens.semanticTestFail,
    pending: tokens.semanticTestPending,
    skipped: tokens.semanticTestSkipped,
  },
  
  // Common semantic tokens
  success: tokens.semanticSuccess,
  error: tokens.semanticError,
  warning: tokens.semanticWarning,
  info: tokens.semanticInfo,
};

// Organized token collections
export const colors = {
  primary: {
    50: tokens.colorPrimary50,
    100: tokens.colorPrimary100,
    200: tokens.colorPrimary200,
    300: tokens.colorPrimary300,
    400: tokens.colorPrimary400,
    500: tokens.colorPrimary500,
    600: tokens.colorPrimary600,
    700: tokens.colorPrimary700,
    800: tokens.colorPrimary800,
    900: tokens.colorPrimary900,
  },
  neutral: {
    50: tokens.colorNeutral50,
    100: tokens.colorNeutral100,
    200: tokens.colorNeutral200,
    300: tokens.colorNeutral300,
    400: tokens.colorNeutral400,
    500: tokens.colorNeutral500,
    600: tokens.colorNeutral600,
    700: tokens.colorNeutral700,
    800: tokens.colorNeutral800,
    900: tokens.colorNeutral900,
  },
};

export const spacing = {
  xs: tokens.spacingXs,
  sm: tokens.spacingSm,
  md: tokens.spacingMd,
  lg: tokens.spacingLg,
  xl: tokens.spacingXl,
  '2xl': tokens.spacing2xl,
  '3xl': tokens.spacing3xl,
  '4xl': tokens.spacing4xl,
};

export const typography = {
  fontFamily: {
    sans: tokens.fontFamilySans,
    mono: tokens.fontFamilyMono,
  },
  fontSize: {
    xs: tokens.fontSizeXs,
    sm: tokens.fontSizeSm,
    base: tokens.fontSizeBase,
    lg: tokens.fontSizeLg,
    xl: tokens.fontSizeXl,
    '2xl': tokens.fontSize2xl,
    '3xl': tokens.fontSize3xl,
    '4xl': tokens.fontSize4xl,
  },
  fontWeight: {
    normal: tokens.fontWeightNormal,
    medium: tokens.fontWeightMedium,
    semibold: tokens.fontWeightSemibold,
    bold: tokens.fontWeightBold,
  },
  lineHeight: {
    tight: tokens.fontLineHeightTight,
    normal: tokens.fontLineHeightNormal,
    relaxed: tokens.fontLineHeightRelaxed,
  },
};

// Utility functions
export const getColor = (name, variant = 500) => {
  return colors[name]?.[variant] || colors.neutral[variant];
};

export const getSpacing = (size) => {
  return spacing[size] || spacing.md;
};

export const getFontSize = (size) => {
  return typography.fontSize[size] || typography.fontSize.base;
};

export const getFontWeight = (weight) => {
  return typography.fontWeight[weight] || typography.fontWeight.normal;
};

// Policy-specific utilities
export const getPolicyColor = (status) => {
  return semantic.policy[status] || semantic.info;
};

export const getTestColor = (result) => {
  return semantic.test[result] || semantic.info;
};

// CSS-in-JS helpers
export const createCSSVariables = () => {
  const cssVars = {};
  
  Object.entries(tokens).forEach(([key, value]) => {
    const cssVarName = `--${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`;
    cssVars[cssVarName] = value;
  });
  
  return cssVars;
};

export const createStyleObject = (tokenMap) => {
  const styles = {};
  
  Object.entries(tokenMap).forEach(([property, tokenKey]) => {
    if (typeof tokenKey === 'string' && tokens[tokenKey]) {
      styles[property] = tokens[tokenKey];
    }
  });
  
  return styles;
};

// Theme utilities
export const createTheme = (overrides = {}) => {
  return {
    colors: { ...colors, ...overrides.colors },
    spacing: { ...spacing, ...overrides.spacing },
    typography: { ...typography, ...overrides.typography },
    semantic: { ...semantic, ...overrides.semantic },
  };
};

// Export everything as default
export default {
  tokens,
  colors,
  spacing,
  typography,
  semantic,
  getColor,
  getSpacing,
  getFontSize,
  getFontWeight,
  getPolicyColor,
  getTestColor,
  createCSSVariables,
  createStyleObject,
  createTheme,
};
