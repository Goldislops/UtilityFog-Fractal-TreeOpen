//
// Design Tokens - SCSS Variables
// Generated from Specify Design System
// Do not edit this file directly
//

{{#each tokens}}
${{kebabCase @key}}: {{value}}; // {{type}}
{{/each}}

// Semantic token aliases for better readability
$policy-allow: $semantic-policy-allow;
$policy-deny: $semantic-policy-deny;
$policy-warning: $semantic-policy-warning;
$policy-info: $semantic-policy-info;

$test-pass: $semantic-test-pass;
$test-fail: $semantic-test-fail;
$test-pending: $semantic-test-pending;
$test-skipped: $semantic-test-skipped;

$success: $semantic-success;
$error: $semantic-error;
$warning: $semantic-warning;
$info: $semantic-info;

// SCSS Maps for programmatic access
$colors: (
  primary: (
    50: $color-primary-50,
    100: $color-primary-100,
    200: $color-primary-200,
    300: $color-primary-300,
    400: $color-primary-400,
    500: $color-primary-500,
    600: $color-primary-600,
    700: $color-primary-700,
    800: $color-primary-800,
    900: $color-primary-900
  ),
  neutral: (
    50: $color-neutral-50,
    100: $color-neutral-100,
    200: $color-neutral-200,
    300: $color-neutral-300,
    400: $color-neutral-400,
    500: $color-neutral-500,
    600: $color-neutral-600,
    700: $color-neutral-700,
    800: $color-neutral-800,
    900: $color-neutral-900
  ),
  semantic: (
    success: $semantic-success,
    error: $semantic-error,
    warning: $semantic-warning,
    info: $semantic-info
  )
);

$spacing: (
  xs: $spacing-xs,
  sm: $spacing-sm,
  md: $spacing-md,
  lg: $spacing-lg,
  xl: $spacing-xl,
  2xl: $spacing-2xl,
  3xl: $spacing-3xl,
  4xl: $spacing-4xl
);

$font-sizes: (
  xs: $font-size-xs,
  sm: $font-size-sm,
  base: $font-size-base,
  lg: $font-size-lg,
  xl: $font-size-xl,
  2xl: $font-size-2xl,
  3xl: $font-size-3xl,
  4xl: $font-size-4xl
);

$font-weights: (
  normal: $font-weight-normal,
  medium: $font-weight-medium,
  semibold: $font-weight-semibold,
  bold: $font-weight-bold
);

// Utility functions
@function color($name, $variant: 500) {
  @return map-get(map-get($colors, $name), $variant);
}

@function spacing($size) {
  @return map-get($spacing, $size);
}

@function font-size($size) {
  @return map-get($font-sizes, $size);
}

@function font-weight($weight) {
  @return map-get($font-weights, $weight);
}

// Mixins for common patterns
@mixin policy-status($status) {
  @if $status == 'allow' {
    color: $policy-allow;
    border-color: $policy-allow;
  } @else if $status == 'deny' {
    color: $policy-deny;
    border-color: $policy-deny;
  } @else if $status == 'warning' {
    color: $policy-warning;
    border-color: $policy-warning;
  } @else if $status == 'info' {
    color: $policy-info;
    border-color: $policy-info;
  }
}

@mixin test-result($result) {
  @if $result == 'pass' {
    color: $test-pass;
    background-color: rgba($test-pass, 0.1);
  } @else if $result == 'fail' {
    color: $test-fail;
    background-color: rgba($test-fail, 0.1);
  } @else if $result == 'pending' {
    color: $test-pending;
    background-color: rgba($test-pending, 0.1);
  } @else if $result == 'skipped' {
    color: $test-skipped;
    background-color: rgba($test-skipped, 0.1);
  }
}

@mixin typography($size: base, $weight: normal, $family: sans) {
  font-size: font-size($size);
  font-weight: font-weight($weight);
  
  @if $family == 'sans' {
    font-family: $font-family-sans;
  } @else if $family == 'mono' {
    font-family: $font-family-mono;
  }
}
